import { minify } from "html-minifier-terser"
import type { HttpContextContract } from "@ioc:Adonis/Core/HttpContext"

export default class MinifyHtml {
	public async handle ({ request, response }: HttpContextContract, next: () => Promise<void>): Promise<void> {
		await next()

		const method = request.method()
		const accepts = request.accepts([]) ?? [] as string[]
		const isXml = request.url().endsWith(".xml")

		if (method !== "GET" || !accepts.includes("text/html") || isXml) {
		  return
		}

		const minified = await minify(response.getBody(), {
			caseSensitive: false,
			collapseBooleanAttributes: true,
			collapseInlineTagWhitespace: true,
			collapseWhitespace: true,
			conservativeCollapse: true,
			continueOnParseError: false,
			/* customAttrAssign: [], */
			/* customAttrCollapse: //, */
			/* customAttrSurround: [], */
			/* customEventAttributes: [ // ], */
			decodeEntities: false,
			html5: true,
			/* ignoreCustomComments: [ // ], */
			/* ignoreCustomFragments: [ // ], */
			includeAutoGeneratedTags: true,
			keepClosingSlash: true,
			maxLineLength: 120,
			minifyCSS: true,
			minifyJS: true,
			noNewlinesBeforeTagClose: false,
			preserveLineBreaks: true,
			processConditionalComments: false,
			/* processScripts: [], */
			quoteCharacter: '"',
			removeAttributeQuotes: false,
			removeComments: true,
			removeEmptyAttributes: false,
			removeEmptyElements: false,
			removeOptionalTags: false,
			removeRedundantAttributes: false,
			removeScriptTypeAttributes: false,
			removeStyleLinkTypeAttributes: false,
			removeTagWhitespace: false,
			sortAttributes: false,
			sortClassName: false,
			trimCustomFragments: false,
			useShortDoctype: false,
		})

		response.send(minified)
	}
}
